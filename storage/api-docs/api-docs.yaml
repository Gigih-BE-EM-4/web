openapi: 3.0.1
info:
  title: CariPengalaman.com
  description: CariPengalaman.com API documentation
  version: 1.0.0
servers:
- url: http://54.169.231.114/capstone/public/api
  description: Main (production) server
- url: /api
  description: Local Server
tags:
- name: User
  description: Operations about user
- name: Company
  description: Operations about company
- name: Project
  description: Operations about project
- name: ProjectRole
  description: Operations about project role
- name: ProjectMember
  description: Operations about project member

# security:
#       - bearerAuth: [] 
paths:
  /user/register:
    post:
      tags:
      - User
      summary: Register user into the system
      description: after register user will get a verify token, user need that token to verify an user account
      operationId: registerUser
      parameters:
      - name: name
        in: query
        description: input your name
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: input your email
        required: true
        schema:
          type: string
      - name: username
        in: query
        description: The user name for register
        required: true
        schema:
          type: string
      - name: address
        in: query
        description: input your address
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: input your password
        required: true
        schema:
          type: string
      - name: confirm password
        in: query
        description: confirm your password
        required: true
        schema:
          type: string
      # requestBody:
      #   description: Register user into the system
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/UserRequest'
      #   required: true
      responses:
        201:
          description: user has been created
          content: {}
        400:
          description: User not created
          content: {}
        422:
          description: Unprocessable Entity
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    post:
      tags:
      - User
      summary: Logs user into the system 
      description: user need to verify the account first with the verify token that already given after register.
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        201:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        401:
          description: user/password not match
          content: {}
        422:
          description: user not found
          content: {}
  /notAuthenticated:
    get:
      tags:
      - User
      summary: Error user not authetincated
      operationId: notAuthenticated
      responses:
        401:
          description: User not authenticated
          content: {}
  /user/verify/{verify}:
    get:
      tags:
      - User
      summary: Verify a User account after register
      description: verify a user account using verify token that already get after register an account
      operationId: verifyUser
      parameters:
      - name: verify
        in: path
        description: insert verify token
        required: true
        schema:
          type: string
      responses:
        201:
          description: user has been verified
          content: {}
        404:
          description: user not found
          content: {}
  /user/forgot-password/{email}:
    get:
      tags:
      - User
      summary: Forgot Password
      operationId: forgotPassword
      parameters:
      - name: email
        in: path
        description: insert account email
        required: true
        schema:
          type: string
      responses:
        201:
          description: user has been reset
          content: {}
        404:
          description: fail to send email
          content: {}
        422:
          description: Email not valid
          content: {}
      security:
      - bearerAuth: [] 
  /user/verify:
    get:
      tags:
      - User
      summary: Check if user account is verify or not
      description: user account need to be verify first in order to get authorize to the full feature of the API
      operationId: isVerify
      responses:
        200:
          description: user is verified
          content: {}
        401:
          description: User not verified
          content: {}
      security:
      - bearerAuth: []    
  /user/changepassword:
    post:
      tags:
      - User
      summary: Change account password
      operationId: changePassword
      parameters:
      - name: password
        in: query
        description: new password
        required: true
        schema:
          type: string
      responses:
        201:
          description: user has been updated
          content: {}
        400:
          description: User not updated
          content: {}
        401:
          description: User not authenticated
          content: {}
        422:
          description: Unprocessable Entity
          content: {}
      security:
      - bearerAuth: [] 
  /user/changeprofile:
    post:
      tags:
      - User
      summary: Change user profile.
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          # application/json:
          #   schema:
          #     type: object
          #     format: base64    
        required: true
      responses:
        201:
          description: user has been updated
          content: {}
        400:
          description: User not updated
          content: {}
        422:
          description: image not uploaded
          content: {}
      security:
      - bearerAuth: [] 
  /user/logout:
    post:
      tags:
      - User
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - bearerAuth: [] 
  /user/ping:
    get:
      tags:
      - User
      description: endpoint to check whether user already login or not
      responses:
        200:
          description: user is logged in
          content: {}
      security:
      - bearerAuth: [] 
  /user/certificates:
    get:
      tags:
      - User
      summary: get all user certificcates
      description: Get all user certificates
      operationId: getAllCerficate
      responses:
        200:
          description: Success
          content: {}
        404:
          description: this user doesnt have certificate
          content: {}
      security:
      - bearerAuth: [] 
  /user/projects:
    get:
      tags:
      - User
      summary: get user certificate in a project
      description: Get user certificate as a project member in a project
      operationId: getCerficate
      responses:
        200:
          description: Success
          content: {}
        404:
          description: this user doesnt have certificate
          content: {}
      security:
      - bearerAuth: [] 
  /user/project/apply:
    post:
      tags:
      - User
      summary: apply to a project
      description: User apply to a project and a specific role in the project
      operationId: applyProject
      parameters:
      - name: project_id
        in: query
        description: input project id
        required: true
        schema:
          type: string
      - name: project_role_id
        in: query
        description: input project role id
        required: true
        schema:
          type: string
      - name: extra_answer
        in: query
        description: input your extra answer
        required: true
        schema:
          type: array
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
        required: true
      # requestBody:
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/Apply'
      #   required: true
      responses:
        200:
          description: apply has been sent.
          content: {}
        400:
          description: fail to send applicant
          content: {}
        422:
          description: CV not uploaded
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /user/{id}:
    get:
      tags:
      - User
      summary: Get user detail by user id
      description: Get the detail of the user account using user id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: insert user Id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
      # security:
      # - bearerAuth: [] 
  /user:
    post:
      tags:
      - User
      summary: Updated user
      description: Update an user accounnt.
      operationId: updateUser
      parameters:
      - name: name
        in: query
        description: update name
        required: false
        schema:
          type: string
      - name: bio
        in: query
        description: update bio
        required: false
        schema:
          type: string
      - name: address
        in: query
        description: update address
        required: false
        schema:
          type: string
      - name: last education
        in: query
        description: update last education
        required: false
        schema:
          type: string
      # requestBody:
      #   description: Updated user object
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/UserRequest'
      #   required: true
      responses:
        200:
          description: user has been updated.
          content: {}
        400:
          description: User not updated
          content: {}
        422:
          description: Unprocessable Entity
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /company:
    post:
      tags:
      - Company
      summary: Create a Company
      operationId: createCompany
      description: create a new company, can be done only by a logged in user
      parameters:
      - name: name
        in: query
        description: company name
        required: true
        schema:
          type: string
      - name: address
        in: query
        description: company address
        required: true
        schema:
          type: string
      - name: category
        in: query
        description: company category
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: company email
        required: true
        schema:
          type: string
      - name: contact
        in: query
        description: company contact
        required: true
        schema:
          type: string
      - name: bio
        in: query
        description: company bio
        required: false
        schema:
          type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: false
      # requestBody:
      #   content:
      #     '*/*':
      #       schema:
      #         type: object
      #         properties:
      #           name:
      #             type: string
      #           profile:
      #             type: string
      #           bio:
      #             type: string
      #           address:
      #             type: string
      #           category:
      #             type: string
      #           email:
      #             type: string
      #           contact:
      #             type: string
      #   required: true
      responses:
        201:
          description: Company has been created
          content: {}
        400:
          description: Company not created
          content: {}
        422:
          description: Unprocessable Entity
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /companies:
    get:
      tags:
      - Company
      summary: Get list of companies
      description: Get list of company
      operationId: getCompany
      responses:
        200:
          description: Success Get All Companies
          content: {}
        404:
          description: Company Not Found
          content: {}
  /company/{company_id}:
    get:
      tags:
      - Company
      summary: Get company detail by id
      description: Get Company Detail using company id
      operationId: getCompanyById
      parameters:
      - name: company_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success Get Company Detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        404:
          description: Company Detail Not Found
          content: {}
  /company/join:
    post:
      tags:
      - Company
      summary: Join a company
      description: Invite someone to a company, This is can only be done by someone who has the company.
      operationId: joinCompany
      parameters:
      - name: company_id
        in: query
        description: input company id
        required: true
        schema:
          type: integer
      - name: user_id
        in: query
        description: input user id
        required: true
        schema:
          type: integer
      # requestBody:
      #   description: Join a company as a member
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/JoinCompanyRequest'
      #   required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinCompanyResponse'
        401:
          description: Unauthorized User
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: [] 
  /company/leave:
    post:
      tags:
      - Company
      summary: Leave a company
      description: Leave a company.
      operationId: leaveCompany
      # parameters:
      # - name: company_id
      #   in: query
      #   description: input company id
      #   required: true
      #   schema:
      #     type: integer
      responses:
        200:
          description: Success Leave Company
          content: {}
        401:
          description: Unauthorized User
          content: {}
      security:
      - bearerAuth: [] 
  /company/{company_id}/members:
    get:
      tags:
      - Company
      summary: Get list of company member
      operationId: getCompanyMember
      parameters:
      - name: company_id
        in: path
        description: Company id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success Get Company Members
          content: {}
        401:
          description: Unauthorized User
          content: {}
      security:
      - bearerAuth: [] 
  /company/project:
    post:
      tags:
      - Project
      summary: Create new Project
      description: Create a new project, This can only be done by company
      operationId: createProject
      parameters:
      - name: name
        in: query
        description: Project name
        required: true
        schema:
          type: string
      - name: description
        in: query
        description: Project description
        required: true
        schema:
          type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: false
      # requestBody:
      #   description: Created company object
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/ProjectRequest'
      #   required: true
      responses:
        200:
          description: Project has been created
          content: {}
        400:
          description: Validation Error
          content: {}
        401:
          description: You are not in this company
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /projects:
    get:
      tags:
      - Project
      summary: Get Project Detail
      description: get Project Detail
      operationId: getProject
      parameters:
      - name: id
        in: query
        description: Project id
        required: true
        schema:
          type: integer
      responses:
        201:
          description: Data Successfully Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Project Not Found
          content: {}
      # security:
      # - bearerAuth: [] 
  /company/project/{id}:
    post:
      tags:
      - Project
      summary: Update existing project
      description: updated a project data
      operationId: updateProject
      parameters:
      - name: id
        in: path
        description: Update Project Id
        required: true
        schema:
          type: integer
      - name: name
        in: query
        description: Update Project name
        required: true
        schema:
          type: string
      - name: description
        in: query
        description: Update Project description
        required: true
        schema:
          type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: false
      # requestBody:
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/ProjectRequest'
      #   required: true
      responses:
        200:
          description: Project has been updated
          content: {}
        400:
          description: Validation Error
          content: {}
        401:
          description: You are not in this company
          content: {}
        404:
          description: Project not found
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /user/company/projects:
    get:
      tags:
      - Project
      summary: Get All Company Project
      description: Get list of Project in the company
      operationId: getAllCompanyProject
      responses:
        201:
          description: Data Successfully Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: You are not in this company
          content: {}
        404:
          description: Project Not Found
          content: {}
      security:
      - bearerAuth: [] 
  /company/project/{id}/role:
    post:
      tags:
      - ProjectRole
      summary: Add Project Role
      description: Create a new project role, This can only be done by company an after the company have a project.
      operationId: addProjectRole
      parameters:
      - name: id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      - name: name
        in: query
        description: Project Role Name
        required: true
        schema:
          type: string
      - name: quota
        in: query
        description: Project Role Quota
        required: true
        schema:
          type: integer
      - name: description
        in: query
        description: Project Role Description
        required: true
        schema:
          type: string
      # requestBody:
      #   description: Add Project Role
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/ProjectRoleRequest'
      #   required: true
      responses:
        200:
          description: Project Role has been created
          content: {}
        400:
          description: Validation Error
          content: {}
        401:
          description: You are not in this company
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /company/project/{project_id}/role/{role_id}:
    post:
      tags:
      - ProjectRole
      summary: Update existing project role
      description: updated project role data
      operationId: updateProjectRole
      parameters:
      - name: project_id
        in: path
        description: Project Id
        required: true
        schema:
          type: integer
      - name: role_id
        in: path
        description: Role Id
        required: true
        schema:
          type: integer
      - name: name
        in: query
        description: Project Role Name
        required: true
        schema:
          type: string
      - name: quota
        in: query
        description: Project Role Quota
        required: true
        schema:
          type: integer
      - name: description
        in: query
        description: Project Role Description
        required: true
        schema:
          type: string
      # requestBody:
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/ProjectRoleRequest'
      #   required: true
      responses:
        200:
          description: Project Role has been updated
          content: {}
        400:
          description: Validation Error
          content: {}
        401:
          description: You are not in this company
          content: {}
        404:
          description: Project Role not found
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /company/project/{project_id}/{project_role_id}/project-member/add:
    post:
      tags:
      - ProjectMember
      summary: Add Project Member
      description: Add a project member to a project, This can only be done by company after screening applicant data.
      operationId: addProjectMember
      parameters:
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      - name: project_role_id
        in: path
        description: Project Role id
        required: true
        schema:
          type: integer
      - name: user_id
        in: query
        description:  User Id to add to be Project Member
        required: true
        schema:
          type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: false
      # requestBody:
      #   description: Add Project Member
      #   content:
      #     '*/*':
      #       schema:
      #         $ref: '#/components/schemas/ProjectMember'
      #   required: true
      responses:
        201:
          description: Project Member has been created
          content: {}
        400:
          description: Validation Error
          content: {}
        401:
          description: You are not in this company
          content: {}
      security:
      - bearerAuth: [] 
      x-codegen-request-body-name: body
  /company/project/{project_id}/project-member:
    get:
      tags:
      - ProjectMember
      summary: Get project member by project id
      description: Get All the Project member in a specific project
      operationId: getProjectMemberByProjectId
      parameters:
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Data Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMember'
        404:
          description: Data Not Found
          content: {}
      security:
      - bearerAuth: [] 
  /company/project/{project_id}/role/{role_id}/remove/{id}:
    delete:
      tags:
      - ProjectMember
      summary: Delete Existing project member
      description: Deletes a project member from a project
      operationId: deleteProjectMember
      parameters:
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      - name: role_id
        in: path
        description: Role id
        required: true
        schema:
          type: integer
      - name: id
        in: path
        description: Project Member Id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Project Member has been removed
          content: {}
        401:
          description: You are not in this company
          content: {}
        404:
          description: Project Member not found
          content: {}
      security:
      - bearerAuth: [] 
  /company/project/{project_id}/role/{role_id}/applicants:
    get:
      tags:
      - Project
      summary: Get All Applicants
      description: Get list of applicants in a Project and in a specific role
      operationId: getApplicants
      parameters:
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      - name: role_id
        in: path
        description: Role id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Applicants has been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: You are not in this company
          content: {}
        404:
          description: Applicants Not Found
          content: {}
        500:
          description: Something went wrong
          content: {}
      security:
      - bearerAuth: [] 
  /company/project/{project_id}/finish:
    post:
      tags:
      - Project
      summary: Finish a Project
      operationId: finishProject
      parameters:
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Project is Done
          content: {}
        400:
          description: Something went wrong
          content: {}
        401:
          description: You are not in this company
          content: {}
      security:
      - bearerAuth: [] 
  /company/project/{project_id}/project-member/{project_member_id}/send-certificate:
    post:
      tags:
      - Project
      summary: send certificate
      description: send certificate to a project member, this can be done after a project finished
      operationId: sendCertificate
      parameters:
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: integer
      - name: project_member_id
        in: path
        description: Project Member id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
        required: true
      # requestBody:
      #   content:
      #     multipart/form-data:
      #       schema:
      #         required:
      #         - certificate
      #         properties:
      #           certificate:
      #             type: string
      #             description: upload project certificate (pdf format).
      #             format: binary
      #   required: true
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Something went wrong
          content: {}
        401:
          description: You are not in this company
          content: {}
      security:
      - bearerAuth: [] 
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        profile:
          type: string
        bio:
          type: string
        username:
          type: string
        address:
          type: string
        last_education:
          type: string
        company_id:
          type: integer
          format: int64
        verify:
          type: string
        passsword:
          type: string
    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        address:
          type: string
        # verify:
        #   type: string
        passsword:
          type: string
      example:   # Sample object
                name: Jessica Smith
                email: jessica@gmail.com
                username: jessica
                address: depok, margonda
                password: 12345678
    Company:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        profile:
          type: string
        bio:
          type: string
        address:
          type: string
        category:
          type: string
        email:
          type: string
        contact:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
        description:
          type: string
        active:
          type: string
        company_id:
          type: integer
          format: int64
    ProjectRequest:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        description:
          type: string
    ProjectMember:
      type: object
      properties:
        id:
          type: integer
          format: int64
        project_id:
          type: integer
          format: int64
        project_role_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        certificate:
          type: string
    ProjectRole:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        quota:
          type: integer
        description:
          type: string
        project_id:
          type: integer
          format: int64
        extra_question:
          type: string
    ProjectRoleRequest:
      type: object
      properties:
        name:
          type: string
        quota:
          type: integer
        description:
          type: string
    JoinCompanyRequest:
      type: object
      properties:
        company_id:
          type: integer
        user_id:
          type: integer
    JoinCompanyResponse:
      type: object
      properties:
        user name:
          type: string
        company name:
          type: string
    Apply:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        project_role_id:
          type: integer
          format: int64
        cv:
          type: string
        extra_answer:
          type: string

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
    # api_key:
    #   type: apiKey
    #   name: Authorization
    #   in: header
